-- Users table for offline storage
CREATE TABLE IF NOT EXISTS UserEntity (
    id INTEGER PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    role TEXT NOT NULL DEFAULT 'user',
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    lastSyncedAt TEXT
);

-- Counties table for offline storage
CREATE TABLE IF NOT EXISTS CountyEntity (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    state TEXT NOT NULL,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    lastSyncedAt TEXT
);

-- Checklist items for offline storage
CREATE TABLE IF NOT EXISTS ChecklistItemEntity (
    id INTEGER PRIMARY KEY,
    countyId INTEGER NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    required INTEGER NOT NULL DEFAULT 1,
    orderIndex INTEGER NOT NULL DEFAULT 0,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    lastSyncedAt TEXT,
    FOREIGN KEY (countyId) REFERENCES CountyEntity(id) ON DELETE CASCADE
);

-- Permit packages for offline storage
CREATE TABLE IF NOT EXISTS PermitPackageEntity (
    id INTEGER PRIMARY KEY,
    userId INTEGER NOT NULL,
    countyId INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'draft',
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    lastSyncedAt TEXT,
    pendingSync INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (countyId) REFERENCES CountyEntity(id) ON DELETE CASCADE
);

-- Documents for offline storage
CREATE TABLE IF NOT EXISTS PermitDocumentEntity (
    id INTEGER PRIMARY KEY,
    packageId INTEGER NOT NULL,
    checklistItemId INTEGER NOT NULL,
    fileName TEXT NOT NULL,
    filePath TEXT NOT NULL,
    mimeType TEXT NOT NULL,
    fileSize INTEGER NOT NULL DEFAULT 0,
    createdAt TEXT NOT NULL,
    updatedAt TEXT NOT NULL,
    lastSyncedAt TEXT,
    pendingSync INTEGER NOT NULL DEFAULT 0,
    localFilePath TEXT,
    FOREIGN KEY (packageId) REFERENCES PermitPackageEntity(id) ON DELETE CASCADE,
    FOREIGN KEY (checklistItemId) REFERENCES ChecklistItemEntity(id) ON DELETE CASCADE
);

-- Sync queue for tracking pending operations
CREATE TABLE IF NOT EXISTS SyncQueueEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    entityType TEXT NOT NULL,
    entityId INTEGER NOT NULL,
    operation TEXT NOT NULL, -- 'CREATE', 'UPDATE', 'DELETE'
    data TEXT, -- JSON data for the operation
    createdAt TEXT NOT NULL,
    retryCount INTEGER NOT NULL DEFAULT 0,
    lastAttemptAt TEXT
);

-- User queries
insertUser:
INSERT OR REPLACE INTO UserEntity (id, email, firstName, lastName, role, createdAt, updatedAt, lastSyncedAt)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

getUserById:
SELECT * FROM UserEntity WHERE id = ?;

getCurrentUser:
SELECT * FROM UserEntity LIMIT 1;

deleteAllUsers:
DELETE FROM UserEntity;

-- County queries
insertCounty:
INSERT OR REPLACE INTO CountyEntity (id, name, state, createdAt, updatedAt, lastSyncedAt)
VALUES (?, ?, ?, ?, ?, ?);

getAllCounties:
SELECT * FROM CountyEntity ORDER BY name;

getCountyById:
SELECT * FROM CountyEntity WHERE id = ?;

deleteAllCounties:
DELETE FROM CountyEntity;

-- Checklist item queries
insertChecklistItem:
INSERT OR REPLACE INTO ChecklistItemEntity (id, countyId, title, description, required, orderIndex, createdAt, updatedAt, lastSyncedAt)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

getChecklistItemsByCounty:
SELECT * FROM ChecklistItemEntity WHERE countyId = ? ORDER BY orderIndex;

deleteChecklistItemsByCounty:
DELETE FROM ChecklistItemEntity WHERE countyId = ?;

deleteAllChecklistItems:
DELETE FROM ChecklistItemEntity;

-- Permit package queries
insertPermitPackage:
INSERT OR REPLACE INTO PermitPackageEntity (id, userId, countyId, name, description, status, createdAt, updatedAt, lastSyncedAt, pendingSync)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

getAllPermitPackages:
SELECT * FROM PermitPackageEntity ORDER BY createdAt DESC;

getPermitPackageById:
SELECT * FROM PermitPackageEntity WHERE id = ?;

getPermitPackagesByUser:
SELECT * FROM PermitPackageEntity WHERE userId = ? ORDER BY createdAt DESC;

getPendingSyncPackages:
SELECT * FROM PermitPackageEntity WHERE pendingSync = 1;

updatePackageStatus:
UPDATE PermitPackageEntity SET status = ?, updatedAt = ?, pendingSync = 1 WHERE id = ?;

markPackageSynced:
UPDATE PermitPackageEntity SET pendingSync = 0, lastSyncedAt = ? WHERE id = ?;

deleteAllPermitPackages:
DELETE FROM PermitPackageEntity;

-- Document queries
insertPermitDocument:
INSERT OR REPLACE INTO PermitDocumentEntity (id, packageId, checklistItemId, fileName, filePath, mimeType, fileSize, createdAt, updatedAt, lastSyncedAt, pendingSync, localFilePath)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

getDocumentsByPackage:
SELECT * FROM PermitDocumentEntity WHERE packageId = ? ORDER BY createdAt;

getDocumentById:
SELECT * FROM PermitDocumentEntity WHERE id = ?;

getPendingSyncDocuments:
SELECT * FROM PermitDocumentEntity WHERE pendingSync = 1;

markDocumentSynced:
UPDATE PermitDocumentEntity SET pendingSync = 0, lastSyncedAt = ? WHERE id = ?;

deleteDocument:
DELETE FROM PermitDocumentEntity WHERE id = ?;

deleteAllDocuments:
DELETE FROM PermitDocumentEntity;

-- Sync queue queries
insertSyncOperation:
INSERT INTO SyncQueueEntity (entityType, entityId, operation, data, createdAt, retryCount, lastAttemptAt)
VALUES (?, ?, ?, ?, ?, ?, ?);

getPendingSyncOperations:
SELECT * FROM SyncQueueEntity ORDER BY createdAt;

updateSyncOperationRetry:
UPDATE SyncQueueEntity SET retryCount = ?, lastAttemptAt = ? WHERE id = ?;

deleteSyncOperation:
DELETE FROM SyncQueueEntity WHERE id = ?;

deleteAllSyncOperations:
DELETE FROM SyncQueueEntity;

-- Utility queries
getLastSyncTime:
SELECT MAX(lastSyncedAt) FROM (
    SELECT lastSyncedAt FROM CountyEntity
    UNION ALL
    SELECT lastSyncedAt FROM ChecklistItemEntity
    UNION ALL
    SELECT lastSyncedAt FROM PermitPackageEntity
    UNION ALL
    SELECT lastSyncedAt FROM PermitDocumentEntity
);
