# Simple Production Dockerfile for Permit Management System
# Uses a more straightforward approach to avoid Java home issues

# Build stage
FROM openjdk:21-jdk-slim AS builder

WORKDIR /app

# Copy dependency files
COPY gradle/ gradle/
COPY gradlew gradlew.bat build.gradle.kts settings.gradle.kts ./
COPY gradle.docker.properties gradle.properties

# Copy source code
COPY shared/ shared/
COPY server/ server/

# Make gradlew executable
RUN chmod +x ./gradlew

# Debug environment
RUN echo "Java version:" && java -version
RUN echo "Gradle version:" && ./gradlew --version

# Build the application
RUN ./gradlew :server:shadowJar -x test --no-daemon

# Verify the JAR was built
RUN ls -la server/build/libs/

# Production runtime stage
FROM openjdk:21-jre-slim

# Install required packages
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

# Copy the built JAR
COPY --from=builder /app/server/build/libs/server-all.jar app.jar

# Copy web interface files
COPY web-app-complete.html web-app-complete.html
COPY web-app-production.html web-app-production.html

# Create necessary directories
RUN mkdir -p uploads logs data tmp && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Set JVM options
ENV JAVA_OPTS="-Xmx1g -Xms512m"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:8080/counties || exit 1

# Run the application
CMD ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
